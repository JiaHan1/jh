{"uid":"c97fffed4d2412c8","name":"test01","fullName":"test1.TestClass#test01","historyId":"8de56153700e17548500b2d18f2f377f","time":{"start":1669172338200,"stop":1669172338533,"duration":333},"status":"broken","statusMessage":"KeyError: 'error_code'","statusTrace":"self = <scripts.test1.TestClass object at 0x7fda37cf06a0>\n\n    def test01(self):\n>       res_001 = upload_file()\n\ntest1.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def upload_file():\n        path_files=app.base_dir+'/files'\n        path_list=[]\n        dir_list=[]\n        files_list=[]\n        global res\n        res={}\n        format=[\"pdf\", \"htm\", \"txt\", \"html\", \"doc\", \"docx\", \"xls\", \"xlsx\", \"xml\", \"model\", \"dict\", \"pickle\", \"png\", \"jpg\", \"jpeg\",\n         \"bmp\", \"tif\", \"tiff\", \"zip\"]\n    \n        for path,dir,files_name in os.walk(path_files):\n            path_list.append(path)\n            dir_list.append(dir)\n            files_list.append(files_name)\n    \n            for file in files_name:\n                if os.path.splitext(file)[1].replace('.','') in format:\n    \n                    files={'files': (file, open(path+'/'+file, mode='rb').read(), \"multipart/form-data\")}\n    \n                    files_api=FilesAPI()\n    \n                    data={\"file_type\":\"1\"}\n    \n                    res_upload_file=files_api.upload_file(files,data,file_operate.extract('token','app'))\n>                   if res_upload_file.json()['error_code']!=400:\nE                   KeyError: 'error_code'\n\ntest02_files.py:34: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init","time":{"start":1669172337893,"stop":1669172338197,"duration":304},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"KeyError: 'error_code'","statusTrace":"self = <scripts.test1.TestClass object at 0x7fda37cf06a0>\n\n    def test01(self):\n>       res_001 = upload_file()\n\ntest1.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def upload_file():\n        path_files=app.base_dir+'/files'\n        path_list=[]\n        dir_list=[]\n        files_list=[]\n        global res\n        res={}\n        format=[\"pdf\", \"htm\", \"txt\", \"html\", \"doc\", \"docx\", \"xls\", \"xlsx\", \"xml\", \"model\", \"dict\", \"pickle\", \"png\", \"jpg\", \"jpeg\",\n         \"bmp\", \"tif\", \"tiff\", \"zip\"]\n    \n        for path,dir,files_name in os.walk(path_files):\n            path_list.append(path)\n            dir_list.append(dir)\n            files_list.append(files_name)\n    \n            for file in files_name:\n                if os.path.splitext(file)[1].replace('.','') in format:\n    \n                    files={'files': (file, open(path+'/'+file, mode='rb').read(), \"multipart/form-data\")}\n    \n                    files_api=FilesAPI()\n    \n                    data={\"file_type\":\"1\"}\n    \n                    res_upload_file=files_api.upload_file(files,data,file_operate.extract('token','app'))\n>                   if res_upload_file.json()['error_code']!=400:\nE                   KeyError: 'error_code'\n\ntest02_files.py:34: KeyError","steps":[],"attachments":[{"uid":"289991422c83a1c9","name":"stdout","source":"289991422c83a1c9.txt","type":"text/plain","size":26}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('init')"},{"name":"suite","value":"test1"},{"name":"subSuite","value":"TestClass"},{"name":"host","value":"jiahandeMacBook-Pro.local"},{"name":"thread","value":"5006-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test1"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('init')"]},"source":"c97fffed4d2412c8.json","parameterValues":[]}